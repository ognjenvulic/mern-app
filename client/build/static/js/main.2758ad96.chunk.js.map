{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","title","body","posts","componentDidMount","getBlogPost","axios","get","then","response","data","setState","console","log","catch","alert","handleChange","target","name","value","submit","event","preventDefault","payload","url","method","resetUserInputs","error","displayBlogPost","length","map","post","index","key","className","onSubmit","this","type","placeholder","onChange","cols","rows","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2RA8GeA,G,kNAxGdC,MAAQ,CACPC,MAAO,GACPC,KAAK,GACLC,MAAO,I,EAGRC,kBAAoB,WACnB,EAAKC,e,EAGNA,YAAc,WACbC,IAAMC,IAAI,QACRC,MAAK,SAACC,GACN,IAAMC,EAAOD,EAASC,KACtB,EAAKC,SAAS,CAAER,MAAOO,IACvBE,QAAQC,IAAI,6BAEZC,OAAM,WACNC,MAAM,0B,EAITC,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACTC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACd,EAAKR,SAAL,eAAiBO,EAAOC,K,EAGzBC,OAAS,SAACC,GACTA,EAAMC,iBAEN,IAAMC,EAAU,CACftB,MAAO,EAAKD,MAAMC,MAClBC,KAAM,EAAKF,MAAME,MAGlBI,IAAM,CACLkB,IAAK,YACLC,OAAQ,OACRf,KAAMa,IAENf,MAAK,SAACC,GACNG,QAAQC,IAAI,mBAAoBJ,GAChC,EAAKiB,kBACL,EAAKrB,iBAELS,OAAM,SAACa,GAASf,QAAQC,IAAI,4BAA6Bc,O,EAG3DD,gBAAkB,WACjB,EAAKf,SAAS,CACbV,MAAO,GACPC,KAAM,M,EAIR0B,gBAAkB,SAACzB,GAClB,OAAKA,EAAM0B,OAEJ1B,EAAM2B,KAAI,SAACC,EAAMC,GAAP,OAChB,yBAAKC,IAAKD,EAAOE,UAAU,qBAC1B,4BAAKH,EAAK9B,OACV,2BAAI8B,EAAK7B,UALe,M,uDAa1B,OACC,yBAAKgC,UAAU,OACd,8CACA,0BAAMC,SAAUC,KAAKhB,QACpB,yBAAKc,UAAU,cACd,2BACCG,KAAK,OACLnB,KAAK,QACLoB,YAAY,QACZnB,MAAOiB,KAAKpC,MAAMC,MAClBsC,SAAUH,KAAKpB,gBAGjB,yBAAKkB,UAAU,cACd,8BACChB,KAAK,OACLoB,YAAY,OACZE,KAAK,KACLC,KAAK,KACLtB,MAAOiB,KAAKpC,MAAME,KAClBqC,SAAUH,KAAKpB,gBAIjB,2CAGD,yBAAKkB,UAAU,SACbE,KAAKR,gBAAgBQ,KAAKpC,MAAMG,a,GAnGpBuC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd5C,OAAM,SAAAa,GACLf,QAAQe,MAAMA,EAAMgC,c","file":"static/js/main.2758ad96.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './App.css'\n\nclass App extends React.Component {\n\t\n\tstate = {\n\t\ttitle: '',\n\t\tbody:'',\n\t\tposts: []\n\t};\n\t\n\tcomponentDidMount = () => {\n\t\tthis.getBlogPost();\n\t}\n\t\n\tgetBlogPost = () => {\n\t\taxios.get('/api')\n\t\t\t.then((response)=>{\n\t\t\t\tconst data = response.data;\n\t\t\t\tthis.setState({ posts: data });\n\t\t\t\tconsole.log('Data has been received');\n\t\t\t})\n\t\t\t.catch(()=>{\n\t\t\t\talert('Error getting data')\n\t\t\t})\n\t}\n\t\n\thandleChange = ({ target }) => {\n\t\tconst { name, value } = target;\n\t\tthis.setState({ [name]: value });\n\t};\n\t\n\tsubmit = (event) => {\n\t\tevent.preventDefault();\n\t\t\n\t\tconst payload = {\n\t\t\ttitle: this.state.title,\n\t\t\tbody: this.state.body\n\t\t}\n\t\t\n\t\taxios({\n\t\t\turl: '/api/save',\n\t\t\tmethod: 'POST',\n\t\t\tdata: payload\n\t\t})\n\t\t.then((response)=>{\n\t\t\tconsole.log(\"Sent to server: \", response);\n\t\t\tthis.resetUserInputs();\n\t\t\tthis.getBlogPost();\n\t\t})\n\t\t.catch((error)=>{console.log(\"Error sending to server: \", error)});\n\t};\n\t\n\tresetUserInputs = () => {\n\t\tthis.setState({\n\t\t\ttitle: '',\n\t\t\tbody: ''\n\t\t});\n\t}\n\t\n\tdisplayBlogPost = (posts) => {\n\t\tif (!posts.length) return null;\n\t\t\n\t\treturn posts.map((post, index)=> (\n\t\t\t<div key={index} className=\"blog-post_display\">\n\t\t\t\t<h3>{post.title}</h3>\n\t\t\t\t<p>{post.body}</p>\n\t\t\t</div>\n\t\t));\n\t}\n\t\n\trender() {\n\t\t//console.log(`State: `, this.state);\n\t\t\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<h1>Welcome to App</h1>\n\t\t\t\t<form onSubmit={this.submit}>\n\t\t\t\t\t<div className=\"form-input\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"Text\"\n\t\t\t\t\t\t\tname=\"title\"\n\t\t\t\t\t\t\tplaceholder=\"Title\"\n\t\t\t\t\t\t\tvalue={this.state.title}\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-input\">\n\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\tname=\"body\"\n\t\t\t\t\t\t\tplaceholder=\"Body\"\n\t\t\t\t\t\t\tcols=\"30\"\n\t\t\t\t\t\t\trows=\"10\"\n\t\t\t\t\t\t\tvalue={this.state.body}\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<button>Submit</button>\n\t\t\t\t</form>\n\t\t\t\t\n\t\t\t\t<div className=\"blog-\">\n\t\t\t\t\t{this.displayBlogPost(this.state.posts)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t};\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}